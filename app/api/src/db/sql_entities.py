"""
This file contains all of our sqlalchemy model definitions. They are used by our code and by alembic.
We are calling them `SqlEntity` instead of just `Entity` to differentiate them from other places in the code.
If we ever move fully to SQL, then we should rename these to just `Entity`.
"""

from datetime import datetime, timezone
from uuid import uuid4
from sqlalchemy import JSON, Column, DateTime, ForeignKey, Integer, String, Text
from sqlalchemy.orm import relationship, DeclarativeBase


class BaseSqlEntity(DeclarativeBase):
    """
    This is the base class for all of our SqlEntities
    """

    __abstract__ = True

    # The UUID primary key of the entity
    id = Column(String, primary_key=True, default=lambda: str(uuid4()))


class Suggestion(BaseSqlEntity):
    """
    This entity represents a suggestion that was generated by the model
    """

    # The original query that was used to generate the suggestion
    original_query = Column(String, nullable=False)
    # The language of the suggestion, either "en" or "fr"
    language = Column(String, nullable=False)
    # The application that requested the suggestion
    requester = Column(String, nullable=False)
    # The content of the suggestion
    content = Column(Text, nullable=False)
    # The list of citations for the suggestion
    citations = Column(JSON, nullable=False)
    # gets mapped to the 'timestamp' field in the json response
    created_at = Column(DateTime, default=datetime.now(timezone.utc), nullable=False)
