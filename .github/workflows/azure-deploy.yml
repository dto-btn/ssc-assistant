name: Deploy appliactions (frontend, api, functions) to Azure

concurrency: pilot-prod

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  id-token: write
  contents: read

jobs:
  api-build-and-deploy:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: pilot-prod
    steps:
    - uses: actions/checkout@v4
      with:
        sparse-checkout: 'app/api'
        sparse-checkout-cone-mode: false

    - name: Move api files to pwd
      run: |
        ls -la
        mv app/api/* .
        rm -rf app
        ls -la

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m venv --copies antenv
        source antenv/bin/activate
        pip install -r requirements.txt

    # Add any other necessary build steps here (e.g., tests)
    #- name: Run tests
    #     TODO

    - name: Log in with Azure
      uses: azure/login@v1
      with:
        # {
        #   "clientId": "<GUID>",
        #   "clientSecret": "<GUID>",
        #   "subscriptionId": "<GUID>",
        #   "tenantId": "<GUID>",
        #   (...)
        # }
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        #client-id: ${{ secrets.AZURE_CLIENT_ID }}
        #tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        #subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Deploy to Azure Web App'
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'ssc-assistant-api'
        slot-name: 'production'
        # az webapp deployment list-publishing-profiles --name ssc-assistant-api --resource-group YourResourceGroupName --xml (save as secret)
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: '.'
        startup-command: ''

  frontend-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        sparse-checkout: 'app/frontend'
        sparse-checkout-cone-mode: false

    - name: Move api files to pwd
      run: |
        ls -la
        mv app/frontend/* .
        rm -rf app
        ls -la

    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - run: |
        npm install
        npm run build --if-present
        npm run test --if-present
      working-directory: '.'
      env:
        VITE_AZURE_AD_CLIENT_ID: ${{ secrets.VITE_AZURE_AD_CLIENT_ID }}
        VITE_AZURE_AD_TENANT_ID: ${{ secrets.VITE_AZURE_AD_TENANT_ID }}

    # This step will only run when the event is a push to the main branch
    - name: Zip artifact for deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: zip release.zip ./* -r

    # This step will only run when the event is a push to the main branch
    - name: Upload artifact for deployment job
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v3
      with:
        name: node-app
        path: release.zip

  frontend-deploy:
    if: github.event_name != 'pull_request'
    environment: pilot-prod
    runs-on: ubuntu-latest
    needs: frontend-build
    steps:
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'

    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app

    # - name: Unzip artifact for deployment
    #   run: unzip release.zip

    - name: 'Deploy to Azure Web App'
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'ssc-assistant'
        slot-name: 'production'
        # az webapp deployment list-publishing-profiles --name ssc-assistant-api --resource-group YourResourceGroupName --xml (save as secret)
        publish-profile: ${{ secrets.AZURE_FRONTEND_PUBLISH_PROFILE }}
        # very important: https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package#enable-running-from-package
        package: 'release.zip'

  cleanup_artifacts:
    needs: 
      - frontend-build 
      - frontend-deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Delete artifacts
        run: |
          # Use GitHub's REST API to delete the artifacts
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ github.run_id }}"